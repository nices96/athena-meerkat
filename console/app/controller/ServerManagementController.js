/*
 * File: app/controller/ServerManagementController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('webapp.controller.ServerManagementController', {
    extend: 'Ext.app.Controller',

    onDatagridServerGroupGridSelect: function(rowmodel, record, index, eOpts) {
         var id = record.get("id");
                var url = GlobalData.urlPrefix + "res/datagrid/list";
                Ext.Ajax.request({
                    url: url,
                    params: {"groupId": id},
                    success: function(resp, ops) {
                        var response = Ext.decode(resp.responseText);
                        if (response.success === true){
                            Ext.getCmp("datagirdServerGrid").getStore().loadData(response.data);
                        }
                        else {
                            Ext.Msg.show({
                                title: "Message",
                                msg: response.msg,
                                buttons: Ext.Msg.OK,
                                icon: Ext.Msg.WARNING
                            });
                        }
                    },
                    method: "GET"
                });
    },

    onServerGridSelect: function(rowmodel, record, index, eOpts) {
        var id = record.get("id");
        var name = record.get("name");
        var hostName = record.get("hostName");
        var sshPort = record.get("sshPort");
        var sshIpaddress = record.get("sshipaddr");
        var osName = record.get("osName");
        var sshNiId = record.get("sshNiId");

        var sshIPAddrField = Ext.getCmp("serverSSHIPAddressCombobox");
        var sshPortField = Ext.getCmp("serverSSHPortTextField");
        var nameField = Ext.getCmp("serverNameTextField");
        var osNameField = Ext.getCmp("serverOSNameDisplayField");
        var hostNameField = Ext.getCmp("serverHostNameTextField");
        var _idField = Ext.getCmp("serverIDHiddenField_");
        var detailTab = Ext.getCmp("detailServerTab");
        detailTab.setVisible(true);
        _idField.setValue(id);
        nameField.setValue(name);
        hostNameField.setValue(hostName);
        sshPortField.setValue(sshPort);
        osNameField.setValue(osName);

        var ipaddrUrl = GlobalData.urlPrefix + "res/server/"+id+"/nis";

        sshIPAddrField.clearValue();
        sshIPAddrField.getStore().getProxy().url = ipaddrUrl;
        sshIPAddrField.getStore().load();
        sshIPAddrField.setValue(sshNiId);

    },

    onEditSSHClick: function(button, e, eOpts) {
        var ipaddrField = Ext.getCmp("tomcatSSHIPAddressTextField");
        var portField = Ext.getCmp("tomcatSSHPortTextField");
        var userIDField = Ext.getCmp("tomcatSSHUserIDTextField");
        var passwordField = Ext.getCmp("tomcatSSHPasswordTextField");
        var btnSave = Ext.getCmp("btnServerSSHSave");
        if(ipaddrField.readOnly){
            ipaddrField.setReadOnly(false);
            portField.setReadOnly(false);
            userIDField.setReadOnly(false);
            passwordField.setReadOnly(false);
            btnSave.show();
            button.hide();
        }
    },

    onBtnServerSSHSaveClick: function(button, e, eOpts) {
        var ipaddrField = Ext.getCmp("tomcatSSHIPAddressTextField");
        var portField = Ext.getCmp("tomcatSSHPortTextField");
        var userIDField = Ext.getCmp("tomcatSSHUserIDTextField");
        var passwordField = Ext.getCmp("tomcatSSHPasswordTextField");
        var _idField = Ext.getCmp("serverIDHiddenField");
        var url = GlobalData.urlPrefix + "res/machine/updatessh";

         Ext.Ajax.request({
            url: url,
            params: {"sshIpAddr":ipaddrField.getValue(), "sshPort":portField.getValue(),
                     "sshUserName":userIDField.getValue(),"sshPassword":passwordField.getValue(),
                     "machineId":_idField.getValue()
                    },
            clientValidation:true,
            waitMsg:"Waiting...",
            success: function(resp, ops) {
                var response = Ext.decode(resp.responseText);

                if (response.success){
                    Ext.Msg.show({
                        title: "Message",
                        msg: response.msg,
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.INFO
                    });
                }
                else {
                    Ext.Msg.show({
                        title: "Message",
                        msg: response.msg,
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.WARNING
                    });
                }
            },
            method: "POST"
        });

    },

    onShowPasswordCheckboxChange: function(field, newValue, oldValue, eOpts) {
         var passwordField = Ext.getCmp("tomcatSSHPasswordTextField");
        if(!newValue){
            passwordField.inputEl.dom.setAttribute('type', 'password');
            passwordField.inputEl.addCls('x-form-password');
        }
        else{
            passwordField.inputEl.dom.setAttribute('type', 'text');
            passwordField.inputEl.addCls('x-form-text');
            passwordField.inputEl.removeCls('x-form-password');
        }
    },

    onBtnServerSSHResetClick: function(button, e, eOpts) {
        var ipaddrField = Ext.getCmp("tomcatSSHIPAddressTextField");
        var portField = Ext.getCmp("tomcatSSHPortTextField");
        var userIDField = Ext.getCmp("tomcatSSHUserIDTextField");
        var passwordField = Ext.getCmp("tomcatSSHPasswordTextField");
        ipaddrField.setValue("");
        portField.setValue("");
        userIDField.setValue("");
        passwordField.setValue("");

    },

    onTbnServerSSHTestConnectionClick: function(button, e, eOpts) {
        var ipaddrField = Ext.getCmp("tomcatSSHIPAddressTextField");
        var portField = Ext.getCmp("tomcatSSHPortTextField");
        var userIDField = Ext.getCmp("tomcatSSHUserIDTextField");
        var passwordField = Ext.getCmp("tomcatSSHPasswordTextField");
        var url = GlobalData.urlPrefix + "res/machine/testssh";
        Ext.Ajax.request({
            url: url,
            method:"GET",
            params: {"sshIpAddr":ipaddrField.getValue(), "sshPort":portField.getValue(),
                     "sshUserName":userIDField.getValue(),"sshPassword":passwordField.getValue()
                    },
            success: function(resp, ops) {

                var response = Ext.decode(resp.responseText);

                if (response.success){
                    Ext.Msg.show({
                        title: "Message",
                        msg: response.msg,
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.INFO
                    });

                    Ext.getCmp("btnServerSSHSave").setDisabled(false);
                }
                else {
                    Ext.Msg.show({
                        title: "Message",
                        msg: response.msg,
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.WARNING
                    });
                      Ext.getCmp("btnServerSSHSave").setDisabled(true);
                }
            }

        });

    },

    onLoadServers: function(component, eOpts) {

    },

    onServerEditBtnClick: function(button, e, eOpts) {

        var sshIPAddrField = Ext.getCmp("serverSSHIPAddressCombobox");
        var sshPortField = Ext.getCmp("serverSSHPortTextField");
        var nameField = Ext.getCmp("serverNameTextField");
        var osNameField = Ext.getCmp("serverOSNameDisplayField");
        var hostNameField = Ext.getCmp("serverHostNameTextField");
        var _idField = Ext.getCmp("serverIDHiddenField_");
        var cancelBtn = Ext.getCmp("serverCancelBtn");
        var saveBtn = Ext.getCmp("serverSaveBtn");

        button.hide();
        saveBtn.setVisible(true);
        cancelBtn.setVisible(true);

        sshIPAddrField.setReadOnly(false);
        sshPortField.setReadOnly(false);
        nameField.setReadOnly(false);
        hostNameField.setReadOnly(false);

    },

    onServerCancelBtnClick: function(button, e, eOpts) {

        var sshIPAddrField = Ext.getCmp("serverSSHIPAddressCombobox");
        var sshPortField = Ext.getCmp("serverSSHPortTextField");
        var nameField = Ext.getCmp("serverNameTextField");
        var hostNameField = Ext.getCmp("serverHostNameTextField");

        var editBtn = Ext.getCmp("serverEditBtn");
        var saveBtn = Ext.getCmp("serverSaveBtn");


        button.hide();
        saveBtn.hide();
        editBtn.setVisible(true);

        //reset value
        var selectedRecords=Ext.getCmp('serverGrid').getSelectionModel().getSelection();
        var sshIPAddr = selectedRecords[0].get("sshNiId");
        var sshPort = selectedRecords[0].get("sshPort");
        var hostName = selectedRecords[0].get("hostName");
        var name = selectedRecords[0].get("name");

        sshIPAddrField.setValue(sshIPAddr);
        sshPortField.setValue(sshPort);
        hostNameField.setValue(hostName);
        nameField.setValue(name);

        sshIPAddrField.setReadOnly(true);
        sshPortField.setReadOnly(true);
        nameField.setReadOnly(true);
        hostNameField.setReadOnly(true);

    },

    onServerSaveBtnClick: function(button, e, eOpts) {
        var sshIPAddrField = Ext.getCmp("serverSSHIPAddressCombobox");
        var sshPortField = Ext.getCmp("serverSSHPortTextField");
        var nameField = Ext.getCmp("serverNameTextField");
        var hostNameField = Ext.getCmp("serverHostNameTextField");
        var _idField = Ext.getCmp("serverIDHiddenField_");
        var params = {"Id":_idField.getValue(),"name":nameField.getValue(), "hostName":hostNameField.getValue(), "sshPort": sshPortField.getValue(),"sshNi":sshIPAddrField.getValue()};
        this.saveServerInfo(_idField, params, function(data){
            if(data){
                var editBtn = Ext.getCmp("serverEditBtn");
                var saveBtn = Ext.getCmp("serverSaveBtn");
                var cancelBtn = Ext.getCmp("serverCancelBtn");
                editBtn.setVisible(true);
                saveBtn.hide();
                cancelBtn.hide();

                sshIPAddrField.setReadOnly(true);
                sshPortField.setReadOnly(true);
                nameField.setReadOnly(true);
                hostNameField.setReadOnly(true);
                webapp.app.getStore("ServerStore").reload();
                Ext.Msg.show({
                    title: "Message",
                    msg: "Update successfully.",
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.WARNING
                });
            }
        });


    },

    loadTomcatServers: function(callback) {
        var url = GlobalData.urlPrefix + "res/machine/tomcatserver";
        Ext.Ajax.request({
            url: url,
            success: function(resp, ops) {
                var response = Ext.decode(resp.responseText);
                if(response.success){
                    callback(response.data);
                }
                else{
                    Ext.Msg.show({
                        title: "Message",
                        msg: response.msg,
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.WARNING
                    });
                }



            }
        });
    },

    loadEnvironmentVariables: function(machineId, callBack) {
        var url = GlobalData.urlPrefix + "res/machine/evlist";
        Ext.Ajax.request({
            url: url,
            params:{"machineId":machineId},
            success: function(resp, ops) {
                var response = Ext.decode(resp.responseText);
                if(response.success){
                    callBack(response.data);
                }
                else{
                    Ext.Msg.show({
                        title: "Message",
                        msg: response.msg,
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.WARNING
                    });
                }
            },
            method:"GET"
        });
    },

    loadEVRevisions: function(machineId, callback) {
        var url = GlobalData.urlPrefix + "res/machine/envrevisions";
        Ext.Ajax.request({
            url: url,
            params:{"machineId":machineId},
            success: function(resp, ops) {
                var response = Ext.decode(resp.responseText);
                if(response.success){
                    callback(response.data);
                }
                else{
                    Ext.Msg.show({
                        title: "Message",
                        msg: response.msg,
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.WARNING
                    });
                }
            },
            method:"GET"
        });
    },

    getServer: function(id, callback) {
        var url = GlobalData.urlPrefix + "res/machine/get";
        Ext.Ajax.request({
            url: url,
            params: {"id" : id},
            success: function(resp, ops) {
                var response = Ext.decode(resp.responseText);
                if(response.success === true){
                    callback(response.data);
                }
                else {
                    Ext.Msg.show({
                        title: "Message",
                        msg: response.msg,
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.WARNING
                    });
                }
            },
            method:"GET"
        });
    },

    saveServerInfo: function(id, params, callback) {
        var url = GlobalData.urlPrefix + "res/server/save";

        //Ext.Ajax.cors = true;
        //Ext.Ajax.useDefaultXhrHeader = false;
        Ext.Ajax.request({
            url: url,
            params: params,
            method:"POST",
            success: function(resp, ops) {
                var response = Ext.decode(resp.responseText);
                if(response.success === true){
                    callback(response.success);
                }
                else {
                    Ext.Msg.show({
                        title: "Message",
                        msg: response.msg,
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.WARNING
                    });
                }
            }
        });
    },

    init: function(application) {
        this.control({
            "#datagridServerGroupGrid": {
                select: this.onDatagridServerGroupGridSelect
            },
            "#serverGrid": {
                select: this.onServerGridSelect
            },
            "#btnServerSSHEdit": {
                click: this.onEditSSHClick
            },
            "#btnServerSSHSave": {
                click: this.onBtnServerSSHSaveClick
            },
            "#showPasswordCheckbox": {
                change: this.onShowPasswordCheckboxChange
            },
            "#btnServerSSHReset": {
                click: this.onBtnServerSSHResetClick
            },
            "#tbnServerSSHTestConnection": {
                click: this.onTbnServerSSHTestConnectionClick
            },
            "#mycontainer31": {
                activate: this.onLoadServers
            },
            "#serverEditBtn": {
                click: this.onServerEditBtnClick
            },
            "#serverCancelBtn": {
                click: this.onServerCancelBtnClick
            },
            "#serverSaveBtn": {
                click: this.onServerSaveBtnClick
            }
        });
    }

});
