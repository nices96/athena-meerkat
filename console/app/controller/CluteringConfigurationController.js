/*
 * File: app/controller/CluteringConfigurationController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('webapp.controller.CluteringConfigurationController', {
    extend: 'Ext.app.Controller',

    id: 'ClusteringConfigurationController',

    onClickComparingClusteringConfiguration: function(button, e, eOpts) {
        this.showClusteringConfigurationWindow("add",0);
    },

    newClusteringConfigurationOnDomainWindow: function(button, e, eOpts) {
        this.showClusteringConfigurationWindow("add",0);
    },

    onSubmitClusteringConfigurationClick: function(button, e, eOpts) {
        var form = Ext.getCmp("clusteringConfigurationForm");			// user form
        var formWindow = Ext.getCmp('ClusteringConfigurationWindow');	// Add user window

        var name = form.getForm().findField("clusteringConfigurationName");
        var value = form.getForm().findField("clusteringConfigurationValue");
        var _id = form.getForm().findField("IDHiddenField");
        var _domainId = form.getForm().findField("domainIdClusteringWindowHiddenField");

        var nameVal = name.getValue().trim();
        var valueVal = value.getValue().trim();
        var _idVal = _id.getValue();
        var _domainIdVal = _domainId.getValue();

        if (!this.validate(name, value)) {
            return;
        }

        //submit new user request
        if (_idVal === "") {
            _idVal = 0;

        }

        this.save({"id" : _idVal, "name" : nameVal,"value" :valueVal, "revision":1 ,"domainId":_domainIdVal});//revision 1 for testing.

    },

    onBtnNewClutersingConfigurationClick: function(button, e, eOpts) {
        this.showClusteringConfigurationWindow("add", 0, GlobalData.lastSelectedMenuId);
    },

    showClusteringConfigurationWindow: function(type, id, domainId) {
        var window = Ext.create("widget.ClusteringConfigurationWindow");
        var submitButton = Ext.getCmp("btnClusteringConfigurationSubmit");
        var form = Ext.getCmp("clusteringConfigurationForm");			// clustering configuration form.
        var _domainId = form.getForm().findField("domainIdClusteringWindowHiddenField");

        _domainId.setValue(domainId);

        if (type === "edit"){
            window.setTitle("Edit Clustering Configuration");
            submitButton.setText("Save");

            var name = form.getForm().findField("clusteringConfigurationName");
            var value = form.getForm().findField("clusteringConfigurationValue");
            var _id = form.getForm().findField("idHiddenField");

            var nameVal = name.getValue().trim();
            var valueVal = value.getValue().trim();

            Ext.Ajax.request({
                url: GlobalData.urlPrefix + "domain/clustering/config/edit",
                params: {"id": id},
                success: function(resp, ops) {
                    var response = Ext.decode(resp.responseText);
                    name.setValue(response.data.name);
                    value.setValue(response.data.value);
                    _id.setValue(id);
                }
            });
        }

        window.show();
    },

    validate: function(name, value) {
        if (!(name.isValid() && value.isValid())){
            Ext.Msg.show({
                title: "Message",
                msg: "Invalid input data.",
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.WARNING
            });
            return false;
        }
        return true;
    },

    save: function(params) {
                var url = GlobalData.urlPrefix + "domain/clustering/config/save";
                var window = Ext.getCmp('clusteringConfigurationWindow');	// Add clustering config window
                Ext.Ajax.request({
                     url: url,
                     params: params,
                     success: function(resp, ops) {
                            var response = Ext.decode(resp.responseText);
                            if(response.success === true){
                               Ext.getCmp("clusteringConfigurationGridView").getStore().getProxy().url = "domain/clustering/config/list?revision=1&domainId="+params["domainId"];
                                Ext.getCmp("clusteringConfigurationGridView").getStore().load();
                                window.close();
                            }
                            else {
                                Ext.Msg.show({
                                    title: "Message",
                                    msg: response.msg,
                                    buttons: Ext.Msg.OK,
                                    icon: Ext.Msg.WARNING
                                });
                            }

                        }
                    });
    },

    deleteConfig: function(id) {
          Ext.MessageBox.confirm('Confirm', 'Are you sure you want to delete this configuration?', function(btn){
              if(btn == "yes"){
                var url = GlobalData.urlPrefix + "domain/clustering/config/delete";
                Ext.Ajax.request({
                    url: url,
                    params: {"id":id},
                    success: function(resp, ops) {
                        var response = Ext.decode(resp.responseText);
                        if(response.success === true){
                            Ext.getCmp("clusteringConfigurationGridView").getStore().getProxy().url = "domain/clustering/config/list?revision=1&domainId="+GlobalData.lastSelectedMenuId;
                            Ext.getCmp("clusteringConfigurationGridView").getStore().load();
                        }
                        else {
                            Ext.Msg.show({
                                title: "Message",
                                msg: response.msg,
                                buttons: Ext.Msg.OK,
                                icon: Ext.Msg.WARNING
                            });
                        }

                    }
                });
              }
          });
    },

    init: function(application) {
        this.control({
            "#btnComparingClusteringConfiguration": {
                click: this.onClickComparingClusteringConfiguration
            },
            "#mybutton42": {
                click: this.newClusteringConfigurationOnDomainWindow
            },
            "#btnClusteringConfigurationSubmit": {
                click: this.onSubmitClusteringConfigurationClick
            },
            "#btnNewClutersingConfiguration": {
                click: this.onBtnNewClutersingConfigurationClick
            }
        });
    }

});
